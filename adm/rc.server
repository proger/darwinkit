#!/bin/sh

# rc.server: server-specific boot initializations
#
# Copyright 2006-2009 Apple Inc and Darkproger. All rights reserved.
#

set -x
echo HOLY FUCKING SHIT THIS IS /etc/rc.server !
/bin/ps axuww
echo will start syslog early
/usr/sbin/syslogd -D
/bin/launchctl log level info
echo will badaboom
(cd /System/Library/LaunchDaemons; /bin/launchctl load *)

#exec /bin/bash

#
# If you wish to override these or any other sysctl settings, copy
# /etc/sysctl.conf.default to /etc/sysctl.conf and put your settings there;
# it will be processed after this script.
#
# Refer to the man pages for launchctl(8) and sysctl(8) as well as
# /etc/sysctl.conf.default for additional information.
#

PATH=/bin:/sbin:/usr/sbin:/usr/bin
#
# Set ipfw to configured state
#
if [ -f /etc/ipfilter/ipfw.conf.apple ]; then
	ipfw  /etc/ipfilter/ipfw.conf.apple
fi
if [ -f /etc/ipfilter/ipfwstate-on ]; then
	sysctl -w net.inet.ip.fw.enable=1
else
	sysctl -w net.inet.ip.fw.enable=0
fi

#
# Set ip6fw to configured state
#
if [ -f /etc/ipfilter/ip6fw.conf.apple ]; then
	ip6fw /etc/ipfilter/ip6fw.conf.apple
fi
if [ -f /etc/ipfilter/ip6fwstate-on ]; then
	sysctl -w net.inet6.ip6.fw.enable=1
else
	sysctl -w net.inet6.ip6.fw.enable=0
fi

# If we are not booted to tune our system as a server then just exit, perform no Tuning
SERVER_INFO="/System/Library/PrivateFrameworks/ServerInformation.framework/Versions/A/Resources/serverinfo";
if [ -e $SERVER_INFO ]; then
	if ! $SERVER_INFO -q --perfmode; then
		exit
	fi
fi

#
# Set TCP to ack every other packet. (RFC-compliant "compatibility" mode.)
# This should increase server performance, especially when connected
# to Windows clients.
#
sysctl -w net.inet.tcp.delayed_ack=2

#
# Scale kernel parameters based on memory configuration.
#
(( memsize=$(sysctl -n hw.memsize) ))
(( memsize/=1073741824 ))

/bin/echo "rc.server[" $$ "]: Tuning server for ${memsize} GB (rounded down)." >> "/private/var/log/system.log"

# Almost all tunings that had been done here are now done in the kernel, which should now use the ServerInformation framework rather than srv=1
#
# If you have a bunch of HFS+ filesystems, as we expect today on servers, then maxnbuf
# still needs to grow slightly.  This is especially true for file servers.
# set -x
if (( ${memsize} >= 2 )); then
	# Increase the system-wide limit on the number of processes.
	# Server requires a fair sized listen queue default
	sysctl -w kern.ipc.somaxconn=2500
	if [ `uname -m` == i386 ]; then
		# Always tune maxproc on K32 kernel
		sysctl -w kern.maxproc=2500
		# Increase the maximum number of open network sockets.
		# The kernel automatically scales these by available RAM to increase disk I/O
		# performance, but server generally wants more than the defaults.
		if (( ${memsize} >= 16 )); then
			sysctl -w kern.maxnbuf=60000
			sysctl -w kern.maxvnodes=280000
			sysctl -w kern.maxfiles=280000
		elif  (( ${memsize} >= 8 )); then
			sysctl -w kern.maxnbuf=42000
			sysctl -w kern.maxvnodes=150000
			sysctl -w kern.maxfiles=150000
		elif  (( ${memsize} >= 4 )); then
			sysctl -w kern.maxnbuf=21000
			sysctl -w kern.maxvnodes=120000
			sysctl -w kern.maxfiles=120000
		else
			sysctl -w kern.maxvnodes=90000
			sysctl -w kern.maxfiles=90000
		fi
	fi
	if [ `uname -m` == x86_64 ]; then
		# Even on K64, we do want a higher maxnbuf
		if (( ${memsize} >= 16 )); then
			sysctl -w kern.maxnbuf=160000
                        # For sizes 16GB or greater, the kernel automatically scales
                        # tuning paramaters to appropriate values for a server based
                        # on installed memory size. The following commands can be used
                        # to read the values on the running system:
                        #    sysctl kern.maxproc
                        #    sysctl kern.maxvnodes
                        #    sysctl kern.maxfiles
		elif  ((${memsize} >= 8)); then
                        # For sizes less than 16GB the kernel maxproc default isn't high enough
                        sysctl -w kern.maxproc=2500
			sysctl -w kern.maxnbuf=60000
			sysctl -w kern.maxvnodes=150000
			sysctl -w kern.maxfiles=150000
		elif  (( ${memsize} >= 4 )); then
                        sysctl -w kern.maxproc=2500
			sysctl -w kern.maxnbuf=21000
			sysctl -w kern.maxvnodes=120000
			sysctl -w kern.maxfiles=120000
		else
                        sysctl -w kern.maxproc=1500
			sysctl -w kern.maxvnodes=90000
			sysctl -w kern.maxfiles=90000
		fi
	fi
fi

#
# Increase the number of processes each user may launch.
# This must be done AFTER setting maxproc, because sysctl fails if a new
# value exceeds its limit (instead of pegging to max).
# The launchctl(8) command is necessary to raise the resource limit for
# launchd(8) and its children. See getrlimit(2) for information.
#
(( maxproc=$(sysctl -n kern.maxproc) ))
(( bigbunch = ${maxproc}/4 ))
(( maxprocperuid=(${maxproc}>2500)?${bigbunch}:(${maxproc}-100) ))
sysctl -w kern.maxprocperuid=${maxprocperuid}
#
# XXX This requires the filesystem to be mounted read-write to communicate
# with launchd correctly.
launchctl limit maxproc ${maxprocperuid} ${maxproc}

# re-read the sysctl.conf file, so any overrides get re-applied
if [ -f /etc/sysctl.conf ]; then
    while read cmd ignore; do
       case ${cmd} in
           \#*|'') ;;
           *) sysctl -w "${cmd}" ;;
       esac
   done < /etc/sysctl.conf
fi
# Fix for issue 7022012
